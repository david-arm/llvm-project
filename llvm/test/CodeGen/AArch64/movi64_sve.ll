; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc -mtriple=aarch64 -mattr=+sve < %s | FileCheck %s

define <2 x i64> @movi_1_v2i64() {
; CHECK-LABEL: movi_1_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #1 // =0x1
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 1)
}

define <2 x i64> @movi_127_v2i64() {
; CHECK-LABEL: movi_127_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #127 // =0x7f
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 127)
}

define <2 x i64> @movi_m128_v2i64() {
; CHECK-LABEL: movi_m128_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #-128 // =0xffffffffffffff80
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 -128)
}

define <2 x i64> @movi_256_v2i64() {
; CHECK-LABEL: movi_256_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #256 // =0x100
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 256)
}

define <2 x i64> @movi_32512_v2i64() {
; CHECK-LABEL: movi_32512_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #32512 // =0x7f00
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 32512)
}

define <2 x i64> @movi_m32768_v2i64() {
; CHECK-LABEL: movi_m32768_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #-32768 // =0xffffffffffff8000
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 -32768)
}

; Special cases where the destination vector does not have 64-bit elements

define <4 x i32> @movi_v4i32_1() {
; CHECK-LABEL: movi_v4i32_1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #127 // =0x7f
; CHECK-NEXT:    ret
  ret <4 x i32> <i32 127, i32 0, i32 127, i32 0>
}

define <4 x i32> @movi_v4i32_2() {
; CHECK-LABEL: movi_v4i32_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #32512 // =0x7f00
; CHECK-NEXT:    ret
  ret <4 x i32> <i32 32512, i32 0, i32 32512, i32 0>
}

define <8 x i16> @movi_v8i16_1() {
; CHECK-LABEL: movi_v8i16_1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #127 // =0x7f
; CHECK-NEXT:    ret
  ret <8 x i16> <i16 127, i16 0, i16 0, i16 0, i16 127, i16 0, i16 0, i16 0>
}

define <8 x i16> @movi_v8i16_2() {
; CHECK-LABEL: movi_v8i16_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #32512 // =0x7f00
; CHECK-NEXT:    ret
  ret <8 x i16> <i16 32512, i16 0, i16 0, i16 0, i16 32512, i16 0, i16 0, i16 0>
}

define <16 x i8> @movi_v16i8_1() {
; CHECK-LABEL: movi_v16i8_1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #127 // =0x7f
; CHECK-NEXT:    ret
  ret <16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
}

define <16 x i8> @movi_v16i8_2() {
; CHECK-LABEL: movi_v16i8_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z0.d, #32512 // =0x7f00
; CHECK-NEXT:    ret
  ret <16 x i8> <i8 0, i8 127, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
}

; Negative cases

define <2 x i64> @movi_128_v2i64() {
; CHECK-LABEL: movi_128_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #128 // =0x80
; CHECK-NEXT:    dup v0.2d, x8
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 128)
}

define <2 x i64> @movi_m127_v2i64() {
; CHECK-LABEL: movi_m127_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, #-129 // =0xffffffffffffff7f
; CHECK-NEXT:    dup v0.2d, x8
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 -129)
}

define <2 x i64> @movi_32513_v2i64() {
; CHECK-LABEL: movi_32513_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #32513 // =0x7f01
; CHECK-NEXT:    dup v0.2d, x8
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 32513)
}

define <2 x i64> @movi_m32769_v2i64() {
; CHECK-LABEL: movi_m32769_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, #-32769 // =0xffffffffffff7fff
; CHECK-NEXT:    dup v0.2d, x8
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 -32769)
}

define <2 x i64> @movi_257_v2i64() {
; CHECK-LABEL: movi_257_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #257 // =0x101
; CHECK-NEXT:    dup v0.2d, x8
; CHECK-NEXT:    ret
  ret <2 x i64> splat (i64 257)
}

define <4 x i32> @movi_v4i32_3() {
; CHECK-LABEL: movi_v4i32_3:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI17_0
; CHECK-NEXT:    ldr q0, [x8, :lo12:.LCPI17_0]
; CHECK-NEXT:    ret
  ret <4 x i32> <i32 -128, i32 0, i32 -128, i32 0>
}

define <16 x i8> @movi_v16i8_3() {
; CHECK-LABEL: movi_v16i8_3:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI18_0
; CHECK-NEXT:    ldr q0, [x8, :lo12:.LCPI18_0]
; CHECK-NEXT:    ret
  ret <16 x i8> <i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 0, i8 0>
}
